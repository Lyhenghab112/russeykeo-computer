"""
QR Recovery System
Handles payment recovery from QR screenshots when server crashes or customer pays later
"""

import re
import hashlib
from typing import Dict, Any, Optional, Tuple
from models import get_db
from utils.payment_session_manager import PaymentSessionManager

class QRRecoverySystem:
    """
    Recovers payment information from QR code data
    Handles server crashes and delayed payments
    """
    
    def __init__(self):
        self.payment_manager = PaymentSessionManager()
    
    def extract_order_info_from_qr(self, qr_data: str) -> Optional[Dict[str, Any]]:
        """
        Extract order information from QR code data
        QR codes typically only contain order reference, not transaction ID
        """
        try:
            # Format 1: KHQR format with order_id only (no transaction_id in QR)
            # Example: "KHQR:order_id=123:amount=50.00" or "ORDER_123"
            khqr_pattern = r"KHQR:order_id=(\d+):amount=([\d.]+)"
            match = re.search(khqr_pattern, qr_data)
            
            if match:
                order_id, amount = match.groups()
                return {
                    'order_id': int(order_id),
                    'transaction_id': None,  # QR codes don't contain transaction ID
                    'amount': float(amount),
                    'format': 'KHQR'
                }
            
            # Format 2: Order reference format (most common)
            # Example: "ORDER_123" or "ORDER_773"
            order_pattern = r"ORDER_(\d+)"
            match = re.search(order_pattern, qr_data)
            
            if match:
                order_id = match.group(1)
                return {
                    'order_id': int(order_id),
                    'transaction_id': None,  # QR codes don't contain transaction ID
                    'amount': None,  # Amount not always in QR
                    'format': 'ORDER_REFERENCE'
                }
            
            # Format 3: Bakong KHQR format
            # Example: "00020101021238570010A0000007270127000697040401080408KHQR0104..."
            if qr_data.startswith('000201') and 'KHQR' in qr_data:
                return self._parse_bakong_qr(qr_data)
            
            return None
            
        except Exception as e:
            print(f"Error extracting order info from QR: {e}")
            return None
    
    def _parse_bakong_qr(self, qr_data: str) -> Optional[Dict[str, Any]]:
        """
        Parse Bakong KHQR format to extract order information
        """
        try:
            amount = 0.0
            reference = None
            
            # Extract amount from Bakong QR
            amount_match = re.search(r'5404(\d{3})', qr_data)
            if amount_match:
                amount = float(amount_match.group(1)) / 100  # Convert from cents
            
            # Extract reference/bill number
            ref_match = re.search(r'6207(\d+)', qr_data)
            if ref_match:
                reference = ref_match.group(1)
            
            # QR codes don't contain transaction ID - it's generated by bank when payment is made
            # The reference is the order ID
            order_id = reference
            
            return {
                'order_id': int(order_id) if order_id else None,
                'amount': amount,
                'reference': reference,
                'transaction_id': None,  # QR codes don't contain transaction ID
                'format': 'BAKONG'
            }
            
        except Exception as e:
            print(f"Error parsing Bakong QR: {e}")
            return None
    
    def recover_payment_from_qr(self, qr_data: str) -> Dict[str, Any]:
        """
        Recover payment information from QR code data
        """
        try:
            # Extract order information from QR
            order_info = self.extract_order_info_from_qr(qr_data)
            
            if not order_info:
                return {
                    'success': False,
                    'error': 'Could not extract order information from QR code'
                }
            
            # If we have order_id, find the order in database
            if 'order_id' in order_info:
                order_data = self._find_order_by_id(order_info['order_id'])
                
                if order_data:
                    return {
                        'success': True,
                        'order_data': order_data,
                        'qr_info': order_info,
                        'message': 'Order found successfully'
                    }
                else:
                    return {
                        'success': False,
                        'error': f'Order {order_info["order_id"]} not found'
                    }
            
            # If we only have transaction_id, find by transaction ID
            elif 'transaction_id' in order_info:
                order_data = self._find_order_by_transaction_id(order_info['transaction_id'])
                
                if order_data:
                    return {
                        'success': True,
                        'order_data': order_data,
                        'qr_info': order_info,
                        'message': 'Order found by transaction ID'
                    }
                else:
                    return {
                        'success': False,
                        'error': f'Order with transaction ID {order_info["transaction_id"]} not found'
                    }
            
            return {
                'success': False,
                'error': 'Insufficient information in QR code'
            }
            
        except Exception as e:
            return {
                'success': False,
                'error': str(e)
            }
    
    def _find_order_by_id(self, order_id: int) -> Optional[Dict[str, Any]]:
        """
        Find order by ID in database
        """
        try:
            conn = get_db()
            cur = conn.cursor(dictionary=True)
            
            try:
                cur.execute("""
                    SELECT o.*, c.first_name, c.last_name, c.email, c.phone
                    FROM orders o
                    JOIN customers c ON o.customer_id = c.id
                    WHERE o.id = %s
                """, (order_id,))
                
                order = cur.fetchone()
                return order
                
            finally:
                cur.close()
                conn.close()
                
        except Exception as e:
            print(f"Error finding order by ID: {e}")
            return None
    
    def _find_order_by_transaction_id(self, transaction_id: str) -> Optional[Dict[str, Any]]:
        """
        Find order by transaction ID in database
        """
        try:
            conn = get_db()
            cur = conn.cursor(dictionary=True)
            
            try:
                cur.execute("""
                    SELECT o.*, c.first_name, c.last_name, c.email, c.phone
                    FROM orders o
                    JOIN customers c ON o.customer_id = c.id
                    WHERE o.transaction_id = %s
                """, (transaction_id,))
                
                order = cur.fetchone()
                return order
                
            finally:
                cur.close()
                conn.close()
                
        except Exception as e:
            print(f"Error finding order by transaction ID: {e}")
            return None
    
    def complete_payment_from_qr(self, qr_data: str, screenshot_path: Optional[str] = None) -> Dict[str, Any]:
        """
        Complete payment from QR code data (for screenshot uploads)
        """
        try:
            # Recover payment information
            recovery_result = self.recover_payment_from_qr(qr_data)
            
            if not recovery_result['success']:
                return recovery_result
            
            order_data = recovery_result['order_data']
            order_id = order_data['id']
            
            # Check if order is already completed
            if order_data['status'] == 'COMPLETED':
                return {
                    'success': False,
                    'error': 'Order is already completed'
                }
            
            # Update order status to completed
            conn = get_db()
            cur = conn.cursor()
            
            try:
                cur.execute("""
                    UPDATE orders 
                    SET status = 'COMPLETED', 
                        approval_status = 'Approved',
                        approval_date = NOW(),
                        approved_by = 1  # Admin user ID
                    WHERE id = %s
                """, (order_id,))
                
                conn.commit()
                
                # If screenshot provided, create payment session record
                if screenshot_path:
                    self._create_payment_session_record(order_data, screenshot_path)
                
                return {
                    'success': True,
                    'order_id': order_id,
                    'message': 'Payment completed successfully',
                    'screenshot_path': screenshot_path
                }
                
            except Exception as e:
                conn.rollback()
                raise e
            finally:
                cur.close()
                conn.close()
                
        except Exception as e:
            return {
                'success': False,
                'error': str(e)
            }
    
    def _create_payment_session_record(self, order_data: Dict[str, Any], screenshot_path: str):
        """
        Create a payment session record for the completed payment
        """
        try:
            conn = get_db()
            cur = conn.cursor()
            
            try:
                cur.execute("""
                    INSERT INTO payment_sessions 
                    (session_id, payment_id, order_id, customer_id, amount, currency,
                     qr_data, md5_hash, bill_number, status, completed_at, 
                     payment_screenshot_path, screenshot_uploaded_at)
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, NOW(), %s, NOW())
                """, (
                    f"RECOVERY_{order_data['id']}",
                    f"PAY_{order_data['id']}",
                    order_data['id'],
                    order_data['customer_id'],
                    order_data['total_amount'],
                    'USD',
                    'QR_RECOVERY',
                    order_data.get('transaction_id', ''),
                    f"BILL_{order_data['id']}",
                    'completed',
                    screenshot_path
                ))
                
                conn.commit()
                
            except Exception as e:
                conn.rollback()
                raise e
            finally:
                cur.close()
                conn.close()
                
        except Exception as e:
            print(f"Error creating payment session record: {e}")
    
    def generate_recovery_qr(self, order_id: int, amount: float, transaction_id: str) -> str:
        """
        Generate QR code data that can be used for payment recovery
        """
        # Format: KHQR:order_id=123:transaction_id=abc123:amount=50.00
        qr_data = f"KHQR:order_id={order_id}:transaction_id={transaction_id}:amount={amount:.2f}"
        return qr_data
    
    def generate_qr_with_order_info(self, order_data: Dict[str, Any]) -> str:
        """
        Generate QR code data with complete order information for recovery
        """
        order_id = order_data['id']
        amount = float(order_data['total_amount'])
        transaction_id = order_data.get('transaction_id', '')
        
        # If no transaction ID, generate one
        if not transaction_id:
            import hashlib
            import uuid
            unique_id = str(uuid.uuid4())
            transaction_id = hashlib.md5(unique_id.encode()).hexdigest()
        
        return self.generate_recovery_qr(order_id, amount, transaction_id)
